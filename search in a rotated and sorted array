//    https://bit.ly/3rEVSK7

int findpivot(vector<int>& arr, int n){
    int start=0;
    int end=n-1;
    int mid=0;
    while(start<end){
        mid=start+(end-start)/2;
        if(arr[mid]>=arr[0]){
            start=mid+1;
        }
        else if(arr[mid]<arr[0]){
            end=mid;
        }
    }
    return start;
}
int find(vector<int>& arr, int start,int end, int k){
    int mid;
    while(start<=end){
        mid=start+(end-start)/2;
        if(arr[mid]==k){
            return mid;
        }
        else if(arr[mid]<k){
            start=mid+1;
        }
        else{
            end=mid-1;
        }
    }
    return -1;
}
int search(vector<int>& arr, int n, int k)
{
    if(arr[n-1]<arr[0]){
    int pivot_index=findpivot(arr,n);
    
    if(k<arr[0]){
         return find(arr,pivot_index,n,k);
    }
    else{
        return find(arr,0,pivot_index-1,k);
    }
    }
    else{
        return find(arr,0,n-1,k);
    }
    // Write your code here.
    // Return the position of K in ARR else return -1.
}
